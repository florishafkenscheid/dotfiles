; Includes
(include "./widgets/bar.yuck")
(include "./widgets/clock.yuck")
(include "./widgets/cpu_gpu.yuck")
(include "./widgets/memory.yuck")
(include "./widgets/mullvad.yuck")
(include "./widgets/now_playing.yuck")
(include "./widgets/workspaces.yuck")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Clock vars & polls
(defvar clock_is_hovered false)
(defpoll gettime_long :interval "1s" "date +'%H:%M:%S'")
(defpoll gettime_short :interval "1s" "date +'%H:%M'")

; CPU && GPU vars & polls
; cpu_percent is a magic value, no need to get it ourselves
(defpoll gpu_percent :interval "2s" "radeontop -d - -l 1 | grep -o 'gpu [0-9]*' | cut -d ' ' -f 2")
(defvar show_temps false) ; Make two instances of the temp popup, only show the one one the current monitor
(defpoll temps_string :interval "2s" "sensors -j | jq -r '\" \\(.[\"k10temp-pci-00c3\"].Tctl.temp1_input | round)    \\(.[\"amdgpu-pci-0300\"].junction.temp2_input | round) \"'")

; Memory usage
(defvar show_memory false)

; Mullvad status
(defpoll mullvad_status :interval "1s" "mullvad status -j | jq -r '.state'")

; Now playing (using playerctl, limited to spotify_player)
(defvar show_song false)
(deflisten now_playing_title :initial "No song has been played yet" "playerctl -p spotify_player --follow metadata --format '{{title}}'")
(deflisten now_playing_artist :initial "No artist to accompany this title" "playerctl -p spotify_player --follow metadata --format '{{artist}}'") 

; Get workspaces and if they're active or not
(defpoll workspace_labels :interval "1s" "/home/blousy/.dotfiles/config/eww/scripts/get-workspace-labels.sh")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; CPU && GPU temps window, add more if more monitors
(defwindow temps_popup
  :monitor 0
  :geometry (geometry :x "0.55%"
                      :y "0%"
            )
  :stacking "overlay"
  :focusable "false"
  (revealer 
    :transition "slidedown"
    :reveal show_temps
    :duration "175ms"
    (box
      :class "island temps-popup-content hardware-popup-content popup"
      (label :text temps_string)
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Memory Usage window, same as CPU && GPU temps window
(defwindow memory_popup
  :monitor 0
  :geometry (geometry :x "6.6%"
                      :y "0%"
            )
  :stacking "overlay"
  :focusable "false"
  (revealer 
    :transition "slidedown"
    :reveal show_memory 
    :duration "175ms"
    (box
      :class "island temps-popup-content hardware-popup-content popup"
      (label
        :text "${round(EWW_RAM.used_mem / 1073741824, 1)}GB / ${round(EWW_RAM.total_mem / 1073741824, 1)}GB"
      )
    )
  )
)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Defining the top bars
(defwindow bar
           :monitor '["<primary>", "DP-2", 0]'
           :geometry (geometry :x "0%"
                               :y "0%"
                               :width "100%"
                               :height "2.75%" ; 1080 * 0.0275 = ~30px
                               :anchor "top center"
                     )
           :stacking "fg"
           :exclusive "true"
           :focusable "ondemand"
           :namespace "bar"
           (bar)
)
